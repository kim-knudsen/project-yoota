// See https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("YOOTA_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeZone {
  id     Int      @id @default(autoincrement())
  value  String   @unique @db.VarChar(255)
  abbr   String   @db.VarChar(10)
  offset Float
  isdst  Boolean
  text   String   @db.VarChar(255)
  utc    String[]
  Event  Event[]
}

enum EventState {
  OPEN
  CLOSED
}

enum VoteType {
  YES
  NO
}

model Event {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  name         String        @db.VarChar(255)
  description  String?
  state        EventState
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeZoneId   Int
  timeZone     TimeZone      @relation(fields: [timeZoneId], references: [id])
  options      Option[]
  participants Participant[]
}

model Option {
  id      Int      @id @default(autoincrement())
  startAt DateTime
  endAt   DateTime
  eventId Int
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  votes   Vote[]
}

model Participant {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(255)
  email   String?
  eventId Int
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  votes   Vote[]
}

model Vote {
  id            Int         @id @default(autoincrement())
  type          VoteType
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  optionId      Int
  option        Option      @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String?  @db.VarChar(255)
  level     Int      @db.SmallInt
  payload   Json
}
